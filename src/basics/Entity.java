package basics;

import static basics.Constants.*;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Class representing entities in a spatial area. 
 */
public class Entity implements java.io.Serializable{
	
	
	private transient Area area = null;
	private transient  int areaID = -1;
	
	/**
	 * Caller of this method gets lock of the entity
	 * @return
	 */
	public Lock getLock() {
		return lock;
	}
	
	/** 
	 * Creates an entity with position <code>x</code> and <code>y</code>. 
	 * The id of the entity is autogenerated. 
	 * @param x the x-cooridinate
	 * @param y the y-cooridinate
	 * @return the entity
	 */
	public static Entity at(int x, int y) {
		return new Entity(ID++, x, y); 
	}
	
	/** 
	 * Creates an entity with position <code>x</code> and <code>y</code>. 
	 * @param id the id of the entity 
	 * @param x the x-cooridinate
	 * @param y the y-cooridinate
	 * @return the entity
	 */
	public static Entity of(int id, int x, int y) {
		return new Entity(id, x, y); 
	}
	
	/** Variable for creating unique entity ids */
	private static int ID = 1; 
	
	/** Unique id */
	private final int id; 
	
	/** Position of the entity */
	private Pos pos;
	/**Lock of this entity*/
	private transient final Lock lock = new ReentrantLock();
	/** 
	 * Private constructor for an entity at position <code>x</code> and <code>y</code>. 
	 * @param x the x-cooridinate
	 * @param y the y-cooridinate
	 */
	private Entity(int id, int x, int y) {
		super();
		this.id = id;
		this.pos = Pos.of(x, y);
	}
	
	/**
	 * Gets the id of this entity
	 * @return the id
	 */
	public int getId() {
		return id;
	}

	/**
	 * Gets the id of this entity.
	 * @return the id
	 */
	public int getX() {
		return pos.x;
	}

	/**
	 * Gets the y-coordinate of this entity. 
	 * @param y the y-coordinate 
	 */
	public int getY() {
		return pos.y;
	}

	/**
	 * Places the entity at the given position. 
	 * @param x the new x-coordinate 
	 * @param y the new y-coordinate 
	 */
	public void goTo(int x, int y) {
		this.pos = Pos.of(x, y); 
	}

	/**
	 * Computes the distance between this entity and the other entity. 
	 * @param other the other entity
	 * @return distance between this entity and the other entity
	 */
	public double distance(Entity other) {
		double dx = Math.abs(this.pos.x - other.pos.x); 
		double dy = Math.abs(this.pos.y - other.pos.y); 
		return Math.sqrt(dx * dx + dy * dy); 
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Entity other = (Entity) obj;
		if (id != other.id)
			return false;
		return true;
	}

	@Override
	public String toString() {
		return id + "[" + pos.x + "/" + pos.y + "]";
	}

	public void setArea(Area area,int i) {
		this.area = area;
		this.areaID = i;
	}
	public Area getArea() {
		return area;
	}

	public int getAreaID() {
		return areaID;
	}

}
